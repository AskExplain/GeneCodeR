[{"path":"/articles/analysis_of_spatial_transcriptomics.html","id":"genecoder-analysis-of-spatial-transcriptomic-data","dir":"Articles","previous_headings":"","what":"GeneCodeR analysis of Spatial Transcriptomic data","title":"Analysis of Spatial Transcriptomic data","text":"Imaging tissue contains genes spatially organised extracellular matrix, individual cell types groups cell compartments. Using linear algebra vectors, expected patterns histology images learned (example patterns (1): extracellular matrix stained eosin, (2): nuclei cells stained hematoxylin). Assigning sample image learned pattern (Generative Encoder algorithm) similar assigning image weight pattern vector. Accordingly, genes also assigned weights set expected image patterns. encodes information space. library wraps around Generative Encoder algorithm (gcode) called GeneCodeR provides comprehensive interface load data path, run gcode, extract relevant transformations, validate learned patterns. Please replace paths Download data format GeneCodeR takes three input files generic Spatial Transcriptomic dataset, per tissue slide: 1 - coordinates 2 - gene expression 3 - images GeneCodeR configuration file takes several parameters. first set parameters information extract spots - spot size, augmentations displacement coordinates, rotation image. second set parameters gcode model learned (via GeneCodeR wrapper). transfrom one modality, another modality (example, image gene expression). meta information file takes several parameters per coordinate, gene expression image. first set parameters read file. , example parameters file type (example, .csv, .tsv, .jpg, .png, market matrix file (.mtx)?), important parameters based file type (example, contain header, separator …). Importantly, another set parameters factor identifier coordinate file - columns contain x-coordinates, y-coordinates label identifier spots? example, label identifiers, given rownames indicated 0. run analysis appropriately, set common genes required spots. Coordinate labels also need extracted. Gene expression data extracted using path list, meta information, configuration parameters. Importantly, labels meta information gene expression data extraction required extracting relevant spots contain gene expression greater background. Relevant frameworks set begin learning Generative Encoder model. Firstly, set data list, stores gene expression spot data. join framework set , creating model structure learns (1): similar function “” datasets, (2): separate functions across gene expression image pixel spots. , incode beta parameters set learn individual patterns genes images. Given samples extracted tissue site (image genes spot), sample patterns shared. feature patterns sample patterns (see first paragraph - genes assigned expected image patterns hematoxylin eosin stains) mapped shared latent space via alpha beta codes. example, use image patterns analogous pattern matching example image spot, latent codes un-rotate example image spots best fits image pattern. Set configuration information - dimensions encoding space samples (i_dim), features (j_dim), well dimensions latent code (k_dim) set . initialisation parameters set via irlba library using partial Singular Value Decomposition. Run Generative Encoder model Now begins testing validation phase… First extract test set coordinate factor labels. Next extract test set gene expression data. Save relevant information, including model, test meta information, test file list test gene expression data. analyse results later.","code":"# Main libraries for analysis library(GeneCodeR) library(gcode)  # Main libraries for plotting library(ggplot2) library(grid) library(gridExtra) main_path <- \"~/Documents/main_files/AskExplain/Q4_2022/gcode/\"  # Please replace these paths path_to_save <- paste(main_path,\"./temp_save_dir/\",sep=\"\") path_to_work <- paste(main_path,\"./temp_work_dir/\",sep=\"\") dir.create(path_to_save) ## Warning in dir.create(path_to_save): '/Users/dbanh_side/Documents/main_files/ ## AskExplain/Q4_2022/gcode/./temp_save_dir' already exists dir.create(path_to_work) ## Warning in dir.create(path_to_work): '/Users/dbanh_side/Documents/main_files/ ## AskExplain/Q4_2022/gcode/./temp_work_dir' already exists setwd(path_to_work) curl::curl_download(url = \"https://prod-dcd-datasets-cache-zipfiles.s3.eu-west-1.amazonaws.com/29ntw7sh4r-5.zip\", destfile = paste(path_to_work,\"he_et_al.zip\",sep=\"\")) utils::unzip(zipfile = paste(path_to_work,\"he_et_al.zip\",sep=\"\"), exdir = path_to_work) path_to_work <- paste(path_to_work,\"29ntw7sh4r-5\",sep=\"\")  setwd(path_to_work)  main_files <- list.files(path_to_work, full.names = T) new_files <- gsub(pattern = \"BC\", replacement = \"BT\", x = main_files) file.rename(from = main_files, to = new_filesnput list of files  file_path_list <- GeneCodeR::extract_path_framework(F)  file_path_list$meta$path <- list.files(path_to_work,pattern = \"*Coords.tsv.gz\",full.names = T) file_path_list$coord$path <- list.files(path_to_work,pattern = \"*csv.gz\",full.names = T) file_path_list$gex$path <- list.files(path_to_work,pattern = \"*stdata.tsv.gz\",full.names = T) file_path_list$pixel$path <- list.files(path_to_work,pattern = \"*jpg\",full.names = T) set.seed(1) train_ids <- sample(c(1:length(file_path_list$coord$path)),round(length(file_path_list$coord$path)*0.9,0)) test_ids <- c(1:length(file_path_list$coord$path))[-train_ids]  train_file_path_list <- lapply(file_path_list,function(X){   list(path=X$path[train_ids]) }) test_file_path_list <- lapply(file_path_list,function(X){   list(path=X$path[-train_ids]) }) # Set up genecoder configuration parameters  genecoder.config <- GeneCodeR::extract_config_framework(F) # Set up meta information  meta_info_list <- GeneCodeR::extract_meta_framework(F) meta_info_list$meta$read_file$file_type <- \"tsv\" meta_info_list$coord$read_file$file_type <- \"csv\" meta_info_list$gex$read_file$file_type <- \"tsv\" meta_info_list$pixel$read_file$file_type <- \"image\"  meta_info_list$meta$read_file$meta$sep <- \"\\t\" meta_info_list$coord$read_file$meta$header <- meta_info_list$gex$read_file$meta$header <- meta_info_list$meta$read_file$meta$header <- T meta_info_list$coord$read_file$meta$sep <- \",\" meta_info_list$gex$read_file$meta$sep <- \"\\t\" meta_info_list$meta$read_file$meta$row.names <- 1 meta_info_list$coord$read_file$meta$quote <- meta_info_list$gex$read_file$meta$quote <- meta_info_list$meta$read_file$meta$quote <- \"\" meta_info_list$coord$read_file$meta$row.names <- 1 meta_info_list$gex$read_file$meta$row.names <- 1  meta_info_list$coord$factor_id$labels <- 0 meta_info_list$coord$factor_id$coord_x <- 1 meta_info_list$coord$factor_id$coord_y <- 2 common_genes <- lapply(c(1:length(file_path_list$gex$path)),function(X){   print(X)   colnames(GeneCodeR::read_file(path = file_path_list$gex$path[X], meta_info = meta_info_list$gex$read_file)[[1]]) }) ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 ## [1] 11 ## [1] 12 ## [1] 13 ## [1] 14 ## [1] 15 ## [1] 16 ## [1] 17 ## [1] 18 ## [1] 19 ## [1] 20 ## [1] 21 ## [1] 22 ## [1] 23 ## [1] 24 ## [1] 25 ## [1] 26 ## [1] 27 ## [1] 28 ## [1] 29 ## [1] 30 ## [1] 31 ## [1] 32 ## [1] 33 ## [1] 34 ## [1] 35 ## [1] 36 ## [1] 37 ## [1] 38 ## [1] 39 ## [1] 40 ## [1] 41 ## [1] 42 ## [1] 43 ## [1] 44 ## [1] 45 ## [1] 46 ## [1] 47 ## [1] 48 ## [1] 49 ## [1] 50 ## [1] 51 ## [1] 52 ## [1] 53 ## [1] 54 ## [1] 55 ## [1] 56 ## [1] 57 ## [1] 58 ## [1] 59 ## [1] 60 ## [1] 61 ## [1] 62 ## [1] 63 ## [1] 64 ## [1] 65 ## [1] 66 ## [1] 67 ## [1] 68 meta_info_list$gex$factor$common_genes <- Reduce(\"intersect\",common_genes) meta_info_list$coord$factor$labels <- lapply(c(1:length(train_file_path_list$coord$path)),function(X){   row.names(GeneCodeR::read_file(path = train_file_path_list$coord$path[X], meta_info = meta_info_list$coord$read_file)[[1]]) }) # Extract gex data gex_data <- GeneCodeR::prepare_gex(file_path_list = train_file_path_list,meta_info_list = meta_info_list,config = genecoder.config) ## [1] \"Extracting gex\" ## [1] \"Preparing gex      1\" ## [1] \"Preparing gex      2\" ## [1] \"Preparing gex      3\" ## [1] \"Preparing gex      4\" ## [1] \"Preparing gex      5\" ## [1] \"Preparing gex      6\" ## [1] \"Preparing gex      7\" ## [1] \"Preparing gex      8\" ## [1] \"Preparing gex      9\" ## [1] \"Preparing gex      10\" ## [1] \"Preparing gex      11\" ## [1] \"Preparing gex      12\" ## [1] \"Preparing gex      13\" ## [1] \"Preparing gex      14\" ## [1] \"Preparing gex      15\" ## [1] \"Preparing gex      16\" ## [1] \"Preparing gex      17\" ## [1] \"Preparing gex      18\" ## [1] \"Preparing gex      19\" ## [1] \"Preparing gex      20\" ## [1] \"Preparing gex      21\" ## [1] \"Preparing gex      22\" ## [1] \"Preparing gex      23\" ## [1] \"Preparing gex      24\" ## [1] \"Preparing gex      25\" ## [1] \"Preparing gex      26\" ## [1] \"Preparing gex      27\" ## [1] \"Preparing gex      28\" ## [1] \"Preparing gex      29\" ## [1] \"Preparing gex      30\" ## [1] \"Preparing gex      31\" ## [1] \"Preparing gex      32\" ## [1] \"Preparing gex      33\" ## [1] \"Preparing gex      34\" ## [1] \"Preparing gex      35\" ## [1] \"Preparing gex      36\" ## [1] \"Preparing gex      37\" ## [1] \"Preparing gex      38\" ## [1] \"Preparing gex      39\" ## [1] \"Preparing gex      40\" ## [1] \"Preparing gex      41\" ## [1] \"Preparing gex      42\" ## [1] \"Preparing gex      43\" ## [1] \"Preparing gex      44\" ## [1] \"Preparing gex      45\" ## [1] \"Preparing gex      46\" ## [1] \"Preparing gex      47\" ## [1] \"Preparing gex      48\" ## [1] \"Preparing gex      49\" ## [1] \"Preparing gex      50\" ## [1] \"Preparing gex      51\" ## [1] \"Preparing gex      52\" ## [1] \"Preparing gex      53\" ## [1] \"Preparing gex      54\" ## [1] \"Preparing gex      55\" ## [1] \"Preparing gex      56\" ## [1] \"Preparing gex      57\" ## [1] \"Preparing gex      58\" ## [1] \"Preparing gex      59\" ## [1] \"Preparing gex      60\" ## [1] \"Preparing gex      61\" ## [1] \"Done preparation!\" # Store meta data meta_info_list$gex$factor$labels <- gex_data$labels   # Extract spot data  genecoder.config$extract_spots$window_size <- 30  spot_data <- GeneCodeR::prepare_spot(file_path_list = train_file_path_list,meta_info_list = meta_info_list,config = genecoder.config, gex_data = gex_data$gex) ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Preparing spot      8\" ## [1] \"Preparing spot      9\" ## [1] \"Preparing spot      10\" ## [1] \"Preparing spot      11\" ## [1] \"Preparing spot      12\" ## [1] \"Preparing spot      13\" ## [1] \"Preparing spot      14\" ## [1] \"Preparing spot      15\" ## [1] \"Preparing spot      16\" ## [1] \"Preparing spot      17\" ## [1] \"Preparing spot      18\" ## [1] \"Preparing spot      19\" ## [1] \"Preparing spot      20\" ## [1] \"Preparing spot      21\" ## [1] \"Preparing spot      22\" ## [1] \"Preparing spot      23\" ## [1] \"Preparing spot      24\" ## [1] \"Preparing spot      25\" ## [1] \"Preparing spot      26\" ## [1] \"Preparing spot      27\" ## [1] \"Preparing spot      28\" ## [1] \"Preparing spot      29\" ## [1] \"Preparing spot      30\" ## [1] \"Preparing spot      31\" ## [1] \"Preparing spot      32\" ## [1] \"Preparing spot      33\" ## [1] \"Preparing spot      34\" ## [1] \"Preparing spot      35\" ## [1] \"Preparing spot      36\" ## [1] \"Preparing spot      37\" ## [1] \"Preparing spot      38\" ## [1] \"Preparing spot      39\" ## [1] \"Preparing spot      40\" ## [1] \"Preparing spot      41\" ## [1] \"Preparing spot      42\" ## [1] \"Preparing spot      43\" ## [1] \"Preparing spot      44\" ## [1] \"Preparing spot      45\" ## [1] \"Preparing spot      46\" ## [1] \"Preparing spot      47\" ## [1] \"Preparing spot      48\" ## [1] \"Preparing spot      49\" ## [1] \"Preparing spot      50\" ## [1] \"Preparing spot      51\" ## [1] \"Preparing spot      52\" ## [1] \"Preparing spot      53\" ## [1] \"Preparing spot      54\" ## [1] \"Preparing spot      55\" ## [1] \"Preparing spot      56\" ## [1] \"Preparing spot      57\" ## [1] \"Preparing spot      58\" ## [1] \"Preparing spot      59\" ## [1] \"Preparing spot      60\" ## [1] \"Preparing spot      61\" ## [1] \"Done preparation!\" # Set up data  data_list <- list(spot_data$spot,as.matrix(spot_data$gex)) # Set up join information  join <- gcode::extract_join_framework(F) join$complete$data_list <- c(1,2) join$complete$alpha_sample <- c(1,1) join$complete$beta_sample <- c(1,2) join$complete$alpha_signal <- c(1,1) join$complete$beta_signal <- c(1,2) join$complete$code <- c(1,1) join$covariance <- c(0,0)  reference <- gcode::extract_references_framework(F) reference$data_list <- c(1) # Set up gcode config gcode.config <- gcode::extract_config(F) gcode.config$init <- list(alpha_sample=\"irlba\",beta_sample=\"irlba\") gcode.config$i_dim <- 500 gcode.config$j_dim <- 500 gcode.config$dimension_reduction <- F gcode.config$max_iter <- 100 gcode.config$seed <- 1 gcode.config$tol <- 1 gcode.config$n.cores <- 5 gcode.config$learn_rate <- 1e-1 gcode.config$batch_size <- 500 # Set up gcode model  genecoder.model <- GeneCodeR::learn_model(data_list = data_list, config = gcode.config, join = join, reference = reference) ## [1] \"Initialising alpha_sample with : irlba\" ## [2] \"Initialising beta_sample with : irlba\" ## Warning in irlba::irlba(as.matrix(x), nu = config$i_dim, maxit = 1): did not ## converge--results might be invalid!; try increasing work or maxit ## Warning in irlba::irlba(as.matrix(x), nv = config$j_dim, maxit = 1): did not ## converge--results might be invalid!; try increasing work or maxit  ## Warning in irlba::irlba(as.matrix(x), nv = config$j_dim, maxit = 1): did not ## converge--results might be invalid!; try increasing work or maxit ## [1] \"Beginning gcode learning with:    Sample dimension reduction (config$i_dim): 500    Feature dimension reduction (config$j_dim): 500    Latent invariant dimension (config$k_dim):     Tolerance Threshold: 1   Maximum number of iterations: 100   Verbose: TRUE\" ## [1] \"Iteration: 1 with Tolerance of: 21.1634805067891\" ## [1] \"Iteration: 2 with Tolerance of: 63.4720802714958\" ## [1] \"Iteration: 3 with Tolerance of: 8.75341078830188\" ## [1] \"Iteration: 4 with Tolerance of: 82.3722229279707\" ## [1] \"Iteration: 5 with Tolerance of: 0.272863785887901\" ## [1] \"Learning has converged for gcode, beginning (if requested) dimension reduction\" ## [1] \"Done! Total runtime of   43.044757048289\" # Evaluate on test set  meta_info_list$coord$factor$labels <- lapply(c(1:length(test_file_path_list$coord$path)),function(X){   row.names(GeneCodeR::read_file(path = test_file_path_list$coord$path[X], meta_info = meta_info_list$coord$read_file)[[1]]) }) # Extract test gex data test_gex_data <- GeneCodeR::prepare_gex(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config) ## [1] \"Extracting gex\" ## [1] \"Preparing gex      1\" ## [1] \"Preparing gex      2\" ## [1] \"Preparing gex      3\" ## [1] \"Preparing gex      4\" ## [1] \"Preparing gex      5\" ## [1] \"Preparing gex      6\" ## [1] \"Preparing gex      7\" ## [1] \"Done preparation!\" meta_info_list$gex$factor$labels <- test_gex_data$labels base_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config, gex_data = test_gex_data$gex) ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" non_zero_markers <- base_test_spot_data$gex>0   save.image(file = paste(sep=\"\",path_to_save,\"all_genecoder.RData\"))"},{"path":"/articles/base_validation.html","id":"genecoder-base-validation-via-relational-equivalence","dir":"Articles","previous_headings":"","what":"GeneCodeR base validation via relational equivalence","title":"Base validation","text":"Reload important files recently saved: Set test configuration GeneCodeR Set validation functions evaluate statistically significant differences via t-test, , cosine similarity. Base validation Base validation used directly compare observed gene expression transformed image spots representing gene expression via pattern matching weight assignment. Cosine similarity used compare observed transformed.","code":"main_path <- \"~/Documents/main_files/AskExplain/Q4_2022/gcode/\"  # Please replace this path path_to_save <- paste(main_path,\"./temp_save_dir/\",sep=\"\")  load(file = paste(sep=\"\",path_to_save,\"all_genecoder.RData\")) # Set up genecoder transform information genecoder.config <- GeneCodeR::extract_config_framework(F) genecoder.config$transform$from <- 1 genecoder.config$transform$to <- 2 genecoder.config$extract_spots$window_size <- 30 # Testing functions  # cosine metric for similarity between observations  test_sample_and_genes <- function(a,b,non_zero_markers,test_type=\"cosine\"){    if (test_type == \"t.test\"){          return(       list(                  sample_wise = do.call('c',parallel::mclapply(c(1:dim(a)[1]),function(X){                      t.test(as.numeric(a[X,non_zero_markers[X,]]),as.numeric(b[X,non_zero_markers[X,]]))$p.value                    },mc.cores = 8)),                  gene_wise = do.call('c',parallel::mclapply(c(1:dim(a)[2]),function(X){                      t.test(as.numeric(a[non_zero_markers[,X],X]),as.numeric(b[non_zero_markers[,X],X]))$p.value                    },mc.cores = 8))                )     )   }     if (test_type == \"cosine\"){     return(       list(                  sample_wise = do.call('c',parallel::mclapply(c(1:dim(a)[1]),function(X){                      lsa::cosine(as.numeric(a[X,non_zero_markers[X,]]),as.numeric(b[X,non_zero_markers[X,]]))                    },mc.cores = 8)),                  gene_wise = do.call('c',parallel::mclapply(c(1:dim(a)[2]),function(X){                      lsa::cosine(as.numeric(a[non_zero_markers[,X],X]),as.numeric(b[non_zero_markers[,X],X]))                    },mc.cores = 8))                )     )   }  } # Base testing  # Extract test spot data  base_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config, gex_data = test_gex_data$gex) ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" # Important non-zero markers (gene is expressed) non_zero_markers <- base_test_spot_data$gex>0    base_spot2gex <- GeneCodeR::genecoder(model=genecoder.model, x = base_test_spot_data$spot, config = genecoder.config, model_type = \"gcode\")      base_spot2gex <- test_sample_and_genes(a = base_test_spot_data$gex, b = base_spot2gex,non_zero_markers = non_zero_markers, test_type = \"cosine\")  save(base_spot2gex,file = paste(sep=\"\",path_to_save,\"base_spot2gex.RData\")) load(file = paste(sep=\"\",path_to_save,\"base_spot2gex.RData\"))  title_name = \"base_cosine_similarity\" tissue_name = \"breast\"  sample_similarity = base_spot2gex$sample_wise feature_similarity = base_spot2gex$gene_wise  library(ggplot2)  lm <- rbind(c(1,2),             c(1,2),             c(1,2))  g1 <- ggplot(data.frame(Measure=sample_similarity,Metric=\"Predicted vs Observed \\n Sample-wise Pearson Correlation\"), aes(x=Metric,y=Measure)) +    geom_violin() + ylim(-1,1)   g2 <- ggplot(data.frame(Measure=feature_similarity,Metric=\"Predicted vs Observed \\n Gene-wise Pearson Correlation\"), aes(x=Metric,y=Measure)) +    geom_violin() + ylim(-1,1)   gg_plots <- list(g1,g2)  library(grid) library(gridExtra) final_plots <- arrangeGrob(   grobs = gg_plots,   layout_matrix = lm )  plot(final_plots) ggsave(final_plots,filename = paste(path_to_save,\"/jpeg_accuracy_gcode_\",tissue_name,\"_SPATIAL/\",title_name,\"_accuracy_\",tissue_name,\"_spatial.png\",sep=\"\"),width = 5,height=5)   rm(list=ls()) gc() ##           used (Mb) gc trigger    (Mb) limit (Mb)   max used    (Mb) ## Ncells 1141178 61.0    2946211   157.4         NA    2946211   157.4 ## Vcells 2072506 15.9 1535690653 11716.4      16384 1382898229 10550.7"},{"path":"/articles/displacement_validation.html","id":"genecoder-spatial-displacement-to-test-invariance","dir":"Articles","previous_headings":"","what":"GeneCodeR spatial displacement to test invariance","title":"Displacement validation","text":"Reload important files recently saved: Set test configuration GeneCodeR Set validation functions evaluate statistically significant differences via t-test, , cosine similarity. Displacement validation Displacement testing used evaluate gene levels change image spot displaced gene expression experimentally measured. expected displacement increases, gene expression difference become weaker terms cosine similarity correlation. Notice taking gradually increasing displacements, cosine correlation can seen follow similar trend (e.g. 0 pixel displacement vs 10,20,30 pixel displacements).","code":"main_path <- \"~/Documents/main_files/AskExplain/Q4_2022/gcode/\"  # Please replace this path path_to_save <- paste(main_path,\"./temp_save_dir/\",sep=\"\")  load(file = paste(sep=\"\",path_to_save,\"all_genecoder.RData\")) # Set up genecoder transform information genecoder.config <- GeneCodeR::extract_config_framework(F) genecoder.config$transform$from <- 1 genecoder.config$transform$to <- 2 genecoder.config$extract_spots$window_size <- 30 # Testing functions  # cosine metric for similarity between observations  test_sample_and_genes <- function(a,b,non_zero_markers,test_type=\"cosine\"){    if (test_type == \"t.test\"){          return(       list(                  sample_wise = do.call('c',parallel::mclapply(c(1:dim(a)[1]),function(X){                      t.test(as.numeric(a[X,non_zero_markers[X,]]),as.numeric(b[X,non_zero_markers[X,]]))$p.value                    },mc.cores = 8)),                  gene_wise = do.call('c',parallel::mclapply(c(1:dim(a)[2]),function(X){                      t.test(as.numeric(a[non_zero_markers[,X],X]),as.numeric(b[non_zero_markers[,X],X]))$p.value                    },mc.cores = 8))                )     )   }     if (test_type == \"cosine\"){     return(       list(                  sample_wise = do.call('c',parallel::mclapply(c(1:dim(a)[1]),function(X){                      lsa::cosine(as.numeric(a[X,non_zero_markers[X,]]),as.numeric(b[X,non_zero_markers[X,]]))                    },mc.cores = 8)),                  gene_wise = do.call('c',parallel::mclapply(c(1:dim(a)[2]),function(X){                      lsa::cosine(as.numeric(a[non_zero_markers[,X],X]),as.numeric(b[non_zero_markers[,X],X]))                    },mc.cores = 8))                )     )   }  } # Spatial displacement testing  displace_spot2gex <- list() for (displace_val in c(0,10,20,30)){   genecoder.config$extract_spots$rotation <- 0   genecoder.config$extract_spots$displacement_x <- displace_val   genecoder.config$extract_spots$displacement_y <- displace_val    displace_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config, gex_data = test_gex_data$gex)    displace_spot2gex[[as.character(displace_val)]] <- GeneCodeR::genecoder(model=genecoder.model, x = displace_test_spot_data$spot, config = genecoder.config, model_type = \"gcode\") } ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" count <- 0 cosine.simil_scores <- c() for (i in c(1:4)){   for (j in c(1:4)){     if (i>j){       count <- count + 1       cosine.simil_scores[[count]] <- test_sample_and_genes(a = displace_spot2gex[[i]],b = displace_spot2gex[[j]], non_zero_markers = non_zero_markers, test_type = \"t.test\")      }   } }  displace_spot2gex <- cosine.simil_scores print(c(\"displace cosine correlation; sample-wise\",paste(c(\"0vs10:    \",\"0vs20:    \",\"10vs20:    \",\"0vs30:    \",\"10vs30:    \",\"20vs30:    \"),round(do.call('c',lapply(displace_spot2gex,function(X){mean(X$sample_wise)})),10)))) ## [1] \"displace cosine correlation; sample-wise\" ## [2] \"0vs10:     0.9498035314\"                  ## [3] \"0vs20:     0.9184919251\"                  ## [4] \"10vs20:     0.9466096219\"                 ## [5] \"0vs30:     0.8993281351\"                  ## [6] \"10vs30:     0.9148656875\"                 ## [7] \"20vs30:     0.9470035489\" print(c(\"displace cosine correlation; gene-wise\",paste(c(\"0vs10:    \",\"0vs20:    \",\"10vs20:    \",\"0vs30:    \",\"10vs30:    \",\"20vs30:    \"),round(do.call('c',lapply(displace_spot2gex,function(X){mean(X$gene_wise)})),10)))) ## [1] \"displace cosine correlation; gene-wise\" ## [2] \"0vs10:     0.999127193\"                 ## [3] \"0vs20:     0.9985239803\"                ## [4] \"10vs20:     0.9991602223\"               ## [5] \"0vs30:     0.9983144945\"                ## [6] \"10vs30:     0.9987602255\"               ## [7] \"20vs30:     0.9992147257\" rm(list=ls()) gc() ##           used (Mb) gc trigger    (Mb) limit (Mb)   max used    (Mb) ## Ncells  753686 40.3    2498607   133.5         NA    3123258   166.8 ## Vcells 1372001 10.5 1535690643 11716.4      16384 1639281165 12506.8"},{"path":"/articles/rotation_validation.html","id":"genecoder-spatial-rotation-to-test-invariance","dir":"Articles","previous_headings":"","what":"GeneCodeR spatial rotation to test invariance","title":"Rotation validation","text":"Reload important files recently saved: Set test configuration GeneCodeR Set validation functions evaluate statistically significant differences via t-test, , cosine similarity. Rotation validation Rotation testing used evaluate rotated images affect differences rotated image transformed gene expression observed gene expression. expected regardless rotation, gene expression different across rotated images transformed gene expression, thus high cosine similarity correlation (close 1).","code":"main_path <- \"~/Documents/main_files/AskExplain/Q4_2022/gcode/\"  # Please replace this path path_to_save <- paste(main_path,\"./temp_save_dir/\",sep=\"\")  load(file = paste(sep=\"\",path_to_save,\"all_genecoder.RData\")) # Set up genecoder transform information genecoder.config <- GeneCodeR::extract_config_framework(F) genecoder.config$transform$from <- 1 genecoder.config$transform$to <- 2 genecoder.config$extract_spots$window_size <- 30 # Testing functions  # cosine metric for similarity between observations  test_sample_and_genes <- function(a,b,non_zero_markers,test_type=\"cosine\"){    if (test_type == \"t.test\"){          return(       list(                  sample_wise = do.call('c',parallel::mclapply(c(1:dim(a)[1]),function(X){                      t.test(as.numeric(a[X,non_zero_markers[X,]]),as.numeric(b[X,non_zero_markers[X,]]))$p.value                    },mc.cores = 8)),                  gene_wise = do.call('c',parallel::mclapply(c(1:dim(a)[2]),function(X){                      t.test(as.numeric(a[non_zero_markers[,X],X]),as.numeric(b[non_zero_markers[,X],X]))$p.value                    },mc.cores = 8))                )     )   }     if (test_type == \"cosine\"){     return(       list(                  sample_wise = do.call('c',parallel::mclapply(c(1:dim(a)[1]),function(X){                      lsa::cosine(as.numeric(a[X,non_zero_markers[X,]]),as.numeric(b[X,non_zero_markers[X,]]))                    },mc.cores = 8)),                  gene_wise = do.call('c',parallel::mclapply(c(1:dim(a)[2]),function(X){                      lsa::cosine(as.numeric(a[non_zero_markers[,X],X]),as.numeric(b[non_zero_markers[,X],X]))                    },mc.cores = 8))                )     )   }  } # Spatial rotation testing   rotate_spot2gex <- list() for (rotate_val in c(0,90,180,270)){      genecoder.config$extract_spots$rotation <- rotate_val    rotate_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config, gex_data = test_gex_data$gex)    rotate_spot2gex[[as.character(rotate_val)]] <- GeneCodeR::genecoder(model=genecoder.model, x = rotate_test_spot_data$spot, config = genecoder.config, model_type = \"gcode\")  } ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" count <- 0 cosine.simil_scores <- c() for (i in c(1:4)){   for (j in c(1:4)){     if (i>j){       count <- count + 1       cosine.simil_scores[[count]] <- test_sample_and_genes(a = rotate_spot2gex[[i]],b = rotate_spot2gex[[j]], non_zero_markers = non_zero_markers, test_type = \"t.test\")      }   } } rotate_spot2gex <- cosine.simil_scores print(c(\"rotate cosine correlation; sample-wise\",paste(c(\"0vs90:    \",\"0vs180:    \",\"0vs270:    \", \"90vs180\",\"90vs270\",\"180vs270\"),round(do.call('c',lapply(rotate_spot2gex,function(X){mean(X$sample_wise)})),5)))) ## [1] \"rotate cosine correlation; sample-wise\" ## [2] \"0vs90:     0.99986\"                     ## [3] \"0vs180:     0.99983\"                    ## [4] \"0vs270:     0.99987\"                    ## [5] \"90vs180 0.99986\"                        ## [6] \"90vs270 0.99983\"                        ## [7] \"180vs270 0.99986\" print(c(\"rotate cosine correlation; gene-wise\",paste(c(\"0vs90:    \",\"0vs180:    \",\"0vs270:    \", \"90vs180\",\"90vs270\",\"180vs270\"),round(do.call('c',lapply(rotate_spot2gex,function(X){mean(X$gene_wise)})),5)))) ## [1] \"rotate cosine correlation; gene-wise\" ## [2] \"0vs90:     1\"                         ## [3] \"0vs180:     1\"                        ## [4] \"0vs270:     1\"                        ## [5] \"90vs180 1\"                            ## [6] \"90vs270 1\"                            ## [7] \"180vs270 1\" rm(list=ls()) gc() ##           used (Mb) gc trigger    (Mb) limit (Mb)   max used    (Mb) ## Ncells  753687 40.3    2498008   133.5         NA    3122510   166.8 ## Vcells 1371909 10.5 1535690547 11716.4      16384 1639285802 12506.8"},{"path":"/articles/signal_validation.html","id":"genecoder-spatial-signal-to-test-quality-of-transform","dir":"Articles","previous_headings":"","what":"GeneCodeR spatial signal to test quality of transform","title":"Signal validation","text":"Reload important files recently saved: Set test configuration GeneCodeR Set validation functions evaluate statistically significant differences via t-test, , cosine similarity. Signal validation Signal testing used evaluate gene expression signals change spatial region example image spot slides spatial region. expected gene expression represent signal, smoothing model can learned reasonable flexible fit.","code":"library(grid) library(gridExtra) library(ggplot2)  main_path <- \"~/Documents/main_files/AskExplain/Q4_2022/gcode/\"  # Please replace this path path_to_save <- paste(main_path,\"./temp_save_dir/\",sep=\"\")  load(file = paste(sep=\"\",path_to_save,\"all_genecoder.RData\")) # Set up genecoder transform information genecoder.config <- GeneCodeR::extract_config_framework(F) genecoder.config$transform$from <- 1 genecoder.config$transform$to <- 2 genecoder.config$extract_spots$window_size <- 30 # Testing functions  # cosine metric for similarity between observations  cosine.simil_sample_and_genes <- function(a,b,non_zero_markers){    return(   list(          sample_wise = do.call('c',parallel::mclapply(c(1:dim(a)[1]),function(X){              lsa::cosine(as.numeric(a[X,non_zero_markers[X,]]),as.numeric(b[X,non_zero_markers[X,]]))            },mc.cores = 8)),          gene_wise = do.call('c',parallel::mclapply(c(1:dim(a)[2]),function(X){              lsa::cosine(as.numeric(a[non_zero_markers[,X],X]),as.numeric(b[non_zero_markers[,X],X]))            },mc.cores = 8))        ) )    } # Spatial signal testing  signal_spot2gex <- list() for (i in c(1:10)){    genecoder.config$extract_spots$displacement_x <- i*3   genecoder.config$extract_spots$displacement_y <- 0    signal_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config, gex_data = test_gex_data$gex)    signal_spot2gex[[as.character(i)]] <- GeneCodeR::genecoder(model=genecoder.model, x = signal_test_spot_data$spot, config = genecoder.config, model_type = \"gcode\")      } ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" ## [1] \"Extracting spots\" ## [1] \"Preparing spot      1\" ## [1] \"Preparing spot      2\" ## [1] \"Preparing spot      3\" ## [1] \"Preparing spot      4\" ## [1] \"Preparing spot      5\" ## [1] \"Preparing spot      6\" ## [1] \"Preparing spot      7\" ## [1] \"Done preparation!\" number_of_top_variable_genes_to_extract_adj.r.squared <- 3 top_genes <- order(apply(base_test_spot_data$gex,2,var),decreasing = T)[1:number_of_top_variable_genes_to_extract_adj.r.squared]  spline_signal_adj.r.squared <- do.call('rbind',lapply(c(top_genes),function(Y){   internal.adj.r2 <- do.call('c',pbmcapply::pbmclapply(c(1:dim(signal_spot2gex[[1]])[1]),function(Z){     signal_spline <- data.frame(gene_level = do.call('c',lapply(c(1:10),function(X){       signal_spot2gex[[X]][Z,Y]     })),displacement=c(1:10))     adj.r.squared <- try(npreg::summary.ss(npreg::ss(x = signal_spline$gene_level,y = signal_spline$displacement))$adj.r.squared,silent = F)     if (!is.character(signal_spline)){       return(as.numeric(adj.r.squared))     }   },mc.cores = 6)) })) signal_spline <- data.frame(gene_level = do.call('c',lapply(c(1:10),function(X){   signal_spot2gex[[X]][1,top_genes[1]] })),displacement=c(1:10))  mod.ss <- npreg::summary.ss(npreg::ss(x = signal_spline$gene_level,y = signal_spline$displacement))  plot(signal_spline$gene_level ~ signal_spline$displacement, main = paste(\"Adj.R-squared:    \",mod.ss$adj.r.squared)) lines(signal_spline$gene_level, mod.ss$y, lty = 2, col = 2, lwd = 2) title_name = \"spatial_signal\" tissue_name = \"breast\"  first_most_variable_gene = spline_signal_adj.r.squared[1,] second_most_variable_gene = spline_signal_adj.r.squared[2,] third_most_variable_gene = spline_signal_adj.r.squared[3,]  library(ggplot2)  lm <- rbind(c(1,2,3),             c(1,2,3),             c(1,2,3))  g1 <- ggplot(data.frame(Measure=first_most_variable_gene,Metric=\"Adj.R.Squared of Spline fits \\n 1st most variable gene \\n across all spatial spots\"), aes(x=Metric,y=Measure)) +   geom_violin() + ylim(-1,1)  g2 <- ggplot(data.frame(Measure=second_most_variable_gene,Metric=\"Adj.R.Squared of Spline fits \\n 2nd most variable gene \\n across all spatial spots\"), aes(x=Metric,y=Measure)) +   geom_violin() + ylim(-1,1)  g3 <- ggplot(data.frame(Measure=third_most_variable_gene,Metric=\"Adj.R.Squared of Spline fits \\n 3rd most variable gene \\n across all spatial spots\"), aes(x=Metric,y=Measure)) +   geom_violin() + ylim(-1,1)  gg_plots <- list(g1,g2,g3)  final_plots <- arrangeGrob(   grobs = gg_plots,   layout_matrix = lm ) ## Warning: Removed 190 rows containing non-finite values ## (`stat_ydensity()`). ## Warning: Removed 191 rows containing non-finite values ## (`stat_ydensity()`). ## Warning: Removed 190 rows containing non-finite values ## (`stat_ydensity()`). plot(final_plots) ggsave(final_plots,filename = paste(path_to_save,\"/jpeg_accuracy_gcode_\",tissue_name,\"_SPATIAL/\",title_name,\"_accuracy_\",tissue_name,\"_spatial.png\",sep=\"\"),width = 7,height=5)   rm(list=ls()) gc() ##           used (Mb) gc trigger    (Mb) limit (Mb)   max used    (Mb) ## Ncells 1209723 64.7    3366022   179.8         NA    3366022   179.8 ## Vcells 2205458 16.9 1553704292 11853.9      16384 1825395395 13926.7"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"AskExplain DBf (2022). GeneCodeR: Transforms image gene expression modalities Spatial Transcriptomics. R package version 2022.1.","code":"@Manual{,   title = {GeneCodeR: Transforms between image and gene expression modalities from Spatial Transcriptomics},   author = {David Banh from AskExplain},   year = {2022},   note = {R package version 2022.1}, }"},{"path":"/index.html","id":"genecoder","dir":"","previous_headings":"","what":"Transforms between image and gene expression modalities from Spatial Transcriptomics","title":"Transforms between image and gene expression modalities from Spatial Transcriptomics","text":"Perturb spatial gene codes imaging tissue information can found - https://askexplain.github.io/GeneCodeR/articles/analysis_of_spatial_transcriptomics.html Results GeneCodeR","code":""},{"path":"/reference/extract_config_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_config_framework - the configuration framework for GeneCodeR — extract_config_framework","title":"extract_config_framework - the configuration framework for GeneCodeR — extract_config_framework","text":"extract_config_framework - configuration framework GeneCodeR","code":""},{"path":"/reference/extract_config_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_config_framework - the configuration framework for GeneCodeR — extract_config_framework","text":"","code":"extract_config_framework(verbose = F)"},{"path":"/reference/extract_config_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_config_framework - the configuration framework for GeneCodeR — extract_config_framework","text":"verbose - set TRUE print config parameters, editted","code":""},{"path":"/reference/extract_meta_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_meta_framework - the meta information framework for GeneCodeR — extract_meta_framework","title":"extract_meta_framework - the meta information framework for GeneCodeR — extract_meta_framework","text":"extract_meta_framework - meta information framework GeneCodeR","code":""},{"path":"/reference/extract_meta_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_meta_framework - the meta information framework for GeneCodeR — extract_meta_framework","text":"","code":"extract_meta_framework(verbose = F)"},{"path":"/reference/extract_meta_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_meta_framework - the meta information framework for GeneCodeR — extract_meta_framework","text":"verbose - set TRUE print meta information, editted","code":""},{"path":"/reference/extract_path_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_path_framework - the path list framework for GeneCodeR — extract_path_framework","title":"extract_path_framework - the path list framework for GeneCodeR — extract_path_framework","text":"extract_path_framework - path list framework GeneCodeR","code":""},{"path":"/reference/extract_path_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_path_framework - the path list framework for GeneCodeR — extract_path_framework","text":"","code":"extract_path_framework(verbose = F)"},{"path":"/reference/extract_path_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_path_framework - the path list framework for GeneCodeR — extract_path_framework","text":"verbose - set TRUE print path list, editted","code":""},{"path":"/reference/genecoder.html","id":null,"dir":"Reference","previous_headings":"","what":"GeneCodeR - Perturbing imaging tissue by altering spatial gene codes — genecoder","title":"GeneCodeR - Perturbing imaging tissue by altering spatial gene codes — genecoder","text":"GeneCodeR - Perturbing imaging tissue altering spatial gene codes","code":""},{"path":"/reference/genecoder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeneCodeR - Perturbing imaging tissue by altering spatial gene codes — genecoder","text":"","code":"genecoder(model, x, model_type, config)"},{"path":"/reference/genecoder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeneCodeR - Perturbing imaging tissue by altering spatial gene codes — genecoder","text":"model - learned model via Generative Encoding x - dataset transformed config - GeneCodeR configuration parameters define modality coming going ","code":""},{"path":"/reference/genecoder.transform.html","id":null,"dir":"Reference","previous_headings":"","what":"genecoder.transform - transform between modalities — genecoder.transform","title":"genecoder.transform - transform between modalities — genecoder.transform","text":"genecoder.transform - transform modalities","code":""},{"path":"/reference/genecoder.transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"genecoder.transform - transform between modalities — genecoder.transform","text":"","code":"genecoder.transform(model, x, model_type, config.transform)"},{"path":"/reference/genecoder.transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"genecoder.transform - transform between modalities — genecoder.transform","text":"model - learned model via Generative Encoding x - dataset transformed config.transform - transform list within GeneCodeR configuration parameters define modality coming going ","code":""},{"path":"/reference/learn_model.html","id":null,"dir":"Reference","previous_headings":"","what":"learn_model - learns the Generative Encoder model — learn_model","title":"learn_model - learns the Generative Encoder model — learn_model","text":"learn_model - learns Generative Encoder model","code":""},{"path":"/reference/learn_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"learn_model - learns the Generative Encoder model — learn_model","text":"","code":"learn_model(   data_list,   config = gcode::extract_config(F),   transfer = gcode::extract_transfer_framework(F),   join,   reference )"},{"path":"/reference/learn_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"learn_model - learns the Generative Encoder model — learn_model","text":"data_list List data matrices varying dimensionality. Attempts find similarities among datasets core structure. config Configuration parameters (required, default provided) transfer Transferring pre-trained model parameters (required) join Join parameters share axes similar (required) #' @export","code":""},{"path":"/reference/prepare_gex.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare_gex - prepares gene expression data — prepare_gex","title":"prepare_gex - prepares gene expression data — prepare_gex","text":"prepare_gex - prepares gene expression data","code":""},{"path":"/reference/prepare_gex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare_gex - prepares gene expression data — prepare_gex","text":"","code":"prepare_gex(file_path_list, meta_info_list, config)"},{"path":"/reference/prepare_gex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare_gex - prepares gene expression data — prepare_gex","text":"file_path_list - list files containing path files including gene expression path meta_info_list - list meta information helps read files extracts relevant information config - main configuration parameters extract image pixels corresponding spot","code":""},{"path":"/reference/prepare_spot.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare_spot - prepares image information per spot — prepare_spot","title":"prepare_spot - prepares image information per spot — prepare_spot","text":"prepare_spot - prepares image information per spot","code":""},{"path":"/reference/prepare_spot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare_spot - prepares image information per spot — prepare_spot","text":"","code":"prepare_spot(file_path_list, meta_info_list, config, gex_data)"},{"path":"/reference/prepare_spot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare_spot - prepares image information per spot — prepare_spot","text":"file_path_list - list files containing path files including image path meta_info_list - list meta information helps read files extracts relevant information config - main configuration parameters extract image pixels corresponding spot","code":""}]
