[{"path":"/articles/analysis_of_spatial_transcriptomics.html","id":"genecoder-analysis-of-spatial-transcriptomic-data","dir":"Articles","previous_headings":"","what":"GeneCodeR analysis of Spatial Transcriptomic data","title":"Analysis of Spatial Transcriptomic data","text":"Imaging tissue contains genes spatially organised extracellular matrix, individual cell types groups cell compartments. Using linear algebra vectors, expected patterns histology images learned (example patterns (1): extracellular matrix stained eosin, (2): nuclei cells stained hematoxylin). Assigning sample image learned pattern (Generative Encoder algorithm) similar assigning image weight pattern vector. Accordingly, genes also assigned weights set expected image patterns. encodes information space. library wraps around Generative Encoder algorithm (gcode) called GeneCodeR provides comprehensive interface load data path, run gcode, extract relevant transformations, validate learned patterns. Please replace paths Download data format GeneCodeR takes three input files generic Spatial Transcriptomic dataset, per tissue slide: 1 - coordinates 2 - gene expression 3 - images GeneCodeR configuration file takes several parameters. first set parameters information extract spots - spot size, augmentations displacement coordinates, rotation image. second set parameters gcode model learned (via GeneCodeR wrapper). transfrom one modality, another modality (example, image gene expression). meta information file takes several parameters per coordinate, gene expression image. first set parameters read file. , example parameters file type (example, .csv, .tsv, .jpg, .png, market matrix file (.mtx)?), important parameters based file type (example, contain header, separator …). Importantly, another set parameters factor identifier coordinate file - columns contain x-coordinates, y-coordinates label identifier spots? example, label identifiers, given rownames indicated 0. run analysis appropriately, set common genes required spots. Coordinate labels also need extracted. Gene expression data extracted using path list, meta information, configuration parameters. Importantly, labels meta information gene expression data extraction required extracting relevant spots contain gene expression greater background. Relevant frameworks set begin learning Generative Encoder model. Firstly, set data list, stores gene expression spot data. join framework set , creating model structure learns (1): similar function “” datasets, (2): separate functions across gene expression image pixel spots. , incode beta parameters set learn individual patterns genes images. Given samples extracted tissue site (image genes spot), sample patterns shared. feature patterns sample patterns (see first paragraph - genes assigned expected image patterns hematoxylin eosin stains) mapped shared latent space via alpha beta codes. example, use image patterns analogous pattern matching example image spot, latent codes un-rotate example image spots best fits image pattern. Set configuration information - dimensions encoding space samples (i_dim), features (j_dim), well dimensions latent code (k_dim) set . initialisation parameters set via irlba library using partial Singular Value Decomposition. Run Generative Encoder model Now begins testing validation phase… First extract test set coordinate factor labels. Next extract test set gene expression data. Save relevant information, including model, test meta information, test file list test gene expression data. Remove files clean space validation Reload important files recently saved: 1 - model learned 2 - test gene expression data 3 - test meta information 4 - test file path information Set test configuration GeneCodeR Set validation functions evaluate statistically significant differences via t-test, , cosine similarity. Base validation Base validation used directly compare observed gene expression transformed image spots representing gene expression via pattern matching weight assignment. Cosine similarity used compare observed transformed.  Rotation validation Rotation testing used evaluate rotated images affect differences rotated image transformed gene expression observed gene expression. expected regardless rotation, gene expression statistically significantly different across rotated images transformed gene expression. Displacement validation Displacement testing used evaluate gene levels change image spot displaced gene expression experimentally measured. expected displacement increases, gene expression difference become statistically significantly different. Similarity validation Similarity testing used evaluate similar displaced image spots experimentally observed spot (example, images overlap). expected similar spots statistically significantly different gene expression levels. Signal validation Signal testing used evaluate gene expression signals change spatial region example image spot slides spatial region. expected gene expression represent signal, smoothing model can learned reasonable flexible fit.   Together, given results consistent expected output based reasonable, flexible appropriate model learns relevant information - GeneCodeR based wrapping Generative Encoders, can considered acceptable model image analysis. Transformational perturbations gene expression images, well , modalities based current future technologies exciting development spatial biology.","code":"# Main libraries for analysis library(GeneCodeR) library(gcode)  # Main libraries for plotting library(ggplot2) library(grid) library(gridExtra) # Please replace these paths path_to_save <- \"~/Documents/main_files/AskExplain/GeneCoder/temp_save_dir/\" path_to_work <- \"~/Documents/main_files/AskExplain/GeneCoder/temp_work_dir/\" dir.create(path_to_save) dir.create(path_to_work)  setwd(path_to_work) curl::curl_download(url = \"https://data.mendeley.com/api/datasets-v2/datasets/29ntw7sh4r/zip/download?version=5\", destfile = paste(path_to_work,\"he_et_al.zip\",sep=\"\")) utils::unzip(zipfile = paste(path_to_work,\"he_et_al.zip\",sep=\"\"), exdir = path_to_work) path_to_work <- paste(path_to_work,\"29ntw7sh4r-5\",sep=\"\")  setwd(path_to_work)  main_files <- list.files(path_to_work, full.names = T) new_files <- gsub(pattern = \"BC\", replacement = \"BT\", x = main_files) file.rename(from = main_files, to = new_files) # Input list of files  file_path_list <- GeneCodeR::extract_path_framework(F)  file_path_list$coord$path <- list.files(path_to_work,pattern = \".csv.gz\",full.names = T) file_path_list$gex$path <- list.files(path_to_work,pattern = \"stdata.tsv.gz\",full.names = T) file_path_list$pixel$path <- list.files(path_to_work,pattern = \".jpg\",full.names = T) set.seed(1) train_ids <- sample(c(1:length(file_path_list$coord$path)),round(length(file_path_list$coord$path)*0.6,0)) test_ids <- c(1:length(file_path_list$coord$path))[-train_ids]  train_file_path_list <- lapply(file_path_list,function(X){   list(path=X$path[train_ids]) }) test_file_path_list <- lapply(file_path_list,function(X){   list(path=X$path[-train_ids]) }) # Set up genecoder configuration parameters  genecoder.config <- GeneCodeR::extract_config_framework(F) # Set up meta information  meta_info_list <- GeneCodeR::extract_meta_framework(F) meta_info_list$coord$read_file$file_type <- \"csv\" meta_info_list$gex$read_file$file_type <- \"tsv\" meta_info_list$pixel$read_file$file_type <- \"image\"  meta_info_list$coord$read_file$meta$header <- meta_info_list$gex$read_file$meta$header <- T meta_info_list$coord$read_file$meta$sep <- \",\" meta_info_list$gex$read_file$meta$sep <- \"\\t\" meta_info_list$coord$read_file$meta$quote <- meta_info_list$gex$read_file$meta$quote <- \"\" meta_info_list$coord$read_file$meta$row.names <- 1 meta_info_list$gex$read_file$meta$row.names <- 1  meta_info_list$coord$factor_id$labels <- 0 meta_info_list$coord$factor_id$coord_x <- 1 meta_info_list$coord$factor_id$coord_y <- 2 common_genes <- lapply(c(1:length(file_path_list$gex$path)),function(X){   print(X)   colnames(GeneCodeR::read_file(path = file_path_list$gex$path[X], meta_info = meta_info_list$gex$read_file)[[1]]) })  meta_info_list$gex$factor$common_genes <- Reduce(\"intersect\",common_genes) meta_info_list$coord$factor$labels <- lapply(c(1:length(train_file_path_list$coord$path)),function(X){   row.names(GeneCodeR::read_file(path = train_file_path_list$coord$path[X], meta_info = meta_info_list$coord$read_file)[[1]]) }) # Extract gex data gex_data <- GeneCodeR::prepare_gex(file_path_list = train_file_path_list,meta_info_list = meta_info_list,config = genecoder.config) # Store meta data meta_info_list$gex$factor$labels <- gex_data$labels  # Extract spot data spot_data <- GeneCodeR::prepare_spot(file_path_list = train_file_path_list,meta_info_list = meta_info_list,config = genecoder.config) # Set up data  data_list <- list(gex=gex_data$gex,spot=spot_data$spot) # Set up join information  join <- gcode::extract_join_framework(F) join$complete$data_list <- c(\"gex\",\"spot\") join$complete$alpha <- c(\"all\",\"all\") join$complete$code <- c(\"all\",\"all\") join$complete$alpha.code <- c(\"all\",\"all\") join$complete$beta.code <- c(\"all\",\"all\") join$complete$incode <- c(\"gex\",\"spot\") join$complete$beta <- c(\"gex\",\"spot\") # Set up gcode config  gcode.config <- gcode::extract_config(F) gcode.config$init <- c(\"irlba\",\"irlba\") gcode.config$k_dim <- 50 gcode.config$i_dim <- 100 gcode.config$j_dim <- 100 # Set up gcode model  genecoder.model <- GeneCodeR::learn_model(data_list = data_list, config = gcode.config, join = join) # Evaluate on test set  meta_info_list$coord$factor$labels <- lapply(c(1:length(test_file_path_list$coord$path)),function(X){   row.names(GeneCodeR::read_file(path = test_file_path_list$coord$path[X], meta_info = meta_info_list$coord$read_file)[[1]]) }) # Extract test gex data test_gex_data <- GeneCodeR::prepare_gex(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config) meta_info_list$gex$factor$labels <- test_gex_data$labels save(genecoder.model,file = paste(sep=\"\",path_to_save,\"genecoder.RData\")) save(test_gex_data,file = paste(sep=\"\",path_to_save,\"test_gex.RData\")) save(meta_info_list,file = paste(sep=\"\",path_to_save,\"meta_info_list.RData\")) save(test_file_path_list,file = paste(sep=\"\",path_to_save,\"test_file_path_list.RData\")) rm(list=ls());gc() ##           used (Mb) gc trigger (Mb) limit (Mb) max used (Mb) ## Ncells  884144 47.3    1508517 80.6         NA  1508517 80.6 ## Vcells 1558217 11.9    8388608 64.0      16384  3467134 26.5 # Restore paths path_to_save <- \"~/Documents/main_files/AskExplain/GeneCoder/temp_save_dir/\" path_to_work <- \"~/Documents/main_files/AskExplain/GeneCoder/temp_work_dir/\" load(paste(sep=\"\",path_to_save,\"genecoder.RData\")) load(paste(sep=\"\",path_to_save,\"test_gex.RData\")) load(paste(sep=\"\",path_to_save,\"meta_info_list.RData\")) load(paste(sep=\"\",path_to_save,\"test_file_path_list.RData\")) # Set up genecoder transform information genecoder.config <- GeneCodeR::extract_config_framework(F) genecoder.config$transform$from <- \"spot\" genecoder.config$transform$to <- \"gex\" # Testing functions  # t.test for difference between observations  t.test_difference_obs <- function(true_obs,a,b){   t.test(c(a - true_obs),c(b - true_obs)) }  # cosine metric for similarity between observations  cosine.simil_sample_and_genes <- function(a,b){    return(   list(          sample_wise = do.call('c',parallel::mclapply(c(1:dim(a)[1]),function(X){              lsa::cosine(a[X,],b[X,])            },mc.cores = 8)),          gene_wise = do.call('c',parallel::mclapply(c(1:dim(a)[2]),function(X){              lsa::cosine(a[,X],b[,X])            },mc.cores = 8))        ) )    } # Base testing  # Extract test spot data  base_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config)  base_spot2gex <- GeneCodeR::genecoder(model=genecoder.model, x = base_test_spot_data$spot, config = genecoder.config)  base_spot2gex <- cosine.simil_sample_and_genes(a = test_gex_data$gex, base_spot2gex)  save(base_spot2gex,file = paste(sep=\"\",path_to_save,\"base_spot2gex.RData\")) load(file = paste(sep=\"\",path_to_save,\"base_spot2gex.RData\"))  title_name = \"base_cosine_similarity\" tissue_name = \"breast\"  sample_similarity = base_spot2gex$sample_wise feature_similarity = base_spot2gex$gene_wise  library(ggplot2)  lm <- rbind(c(1,2),             c(1,2),             c(1,2))  g1 <- ggplot(data.frame(Measure=sample_similarity,Metric=\"Predicted vs Observed \\n Sample-wise Pearson Correlation\"), aes(x=Metric,y=Measure)) +    geom_violin() + ylim(-1,1)   g2 <- ggplot(data.frame(Measure=feature_similarity,Metric=\"Predicted vs Observed \\n Gene-wise Pearson Correlation\"), aes(x=Metric,y=Measure)) +    geom_violin() + ylim(-1,1)   gg_plots <- list(g1,g2)  library(grid) library(gridExtra) final_plots <- arrangeGrob(   grobs = gg_plots,   layout_matrix = lm )  plot(final_plots) ggsave(final_plots,filename = paste(path_to_save,\"/jpeg_accuracy_gcode_\",tissue_name,\"_SPATIAL/\",title_name,\"_accuracy_\",tissue_name,\"_spatial.png\",sep=\"\"),width = 5,height=5) # Spatial rotation testing  rotate_spot2gex <- list() for (rotate_val in c(0,90,180,270)){   genecoder.config$extract_spots$rotation <- rotate_val    rotate_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config)    rotate_spot2gex[[as.character(rotate_val)]] <- GeneCodeR::genecoder(model=genecoder.model, x = rotate_test_spot_data$spot, config = genecoder.config) }   rotate_spot2gex <- lapply(c(2:4),function(X){   t.test_difference_obs(true_obs = test_gex_data$gex, a = rotate_spot2gex[[1]], b = rotate_spot2gex[[X]]) })  save(rotate_spot2gex,file = paste(sep=\"\",path_to_save,\"rotate_spot2gex.RData\")) load(file = paste(sep=\"\",path_to_save,\"rotate_spot2gex.RData\"))  print(c(\"rotate p-value\",paste(c(\"0vs90:    \",\"0vs180:    \",\"0vs270:    \"),round(do.call('c',lapply(rotate_spot2gex,function(X){X$p.value})),5)))) ## [1] \"rotate p-value\"      \"0vs90:     0.76472\"  \"0vs180:     0.96699\" ## [4] \"0vs270:     0.81952\" # Spatial displacement testing  displace_spot2gex <- list() for (displace_val in c(0,2,4,8)){   genecoder.config$extract_spots$rotation <- 0   genecoder.config$extract_spots$displacement_x <- displace_val   genecoder.config$extract_spots$displacement_y <- displace_val    displace_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config)    displace_spot2gex[[as.character(displace_val)]] <- GeneCodeR::genecoder(model=genecoder.model, x = displace_test_spot_data$spot, config = genecoder.config) }  displace_spot2gex <- lapply(c(2:4),function(X){   t.test_difference_obs(true_obs = test_gex_data$gex, a = displace_spot2gex[[1]], b = displace_spot2gex[[X]]) })  save(displace_spot2gex,file = paste(sep=\"\",path_to_save,\"displace_spot2gex.RData\")) load(file = paste(sep=\"\",path_to_save,\"displace_spot2gex.RData\"))  print(c(\"displace p-value\",paste(c(\"0vs2:    \",\"0vs4:    \",\"0vs8:    \"),round(do.call('c',lapply(displace_spot2gex,function(X){X$p.value})),5)))) ## [1] \"displace p-value\"  \"0vs2:     0.63127\" \"0vs4:     0.30681\" ## [4] \"0vs8:     0.04463\" # Spatial similarity testing  similar_spot2gex <- list() for (i in c(1,2,3,4)){    if (i==1){     similar_val.x = -3     similar_val.y = -3   }   if (i==2){     similar_val.x = 3     similar_val.y = -3   }   if (i==3){     similar_val.x = -3     similar_val.y = 3   }   if (i==4){     similar_val.x = 3     similar_val.y = 3   }    genecoder.config$extract_spots$displacement_x <- similar_val.x   genecoder.config$extract_spots$displacement_y <- similar_val.y    similar_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config)    similar_spot2gex[[as.character(i)]] <- GeneCodeR::genecoder(model=genecoder.model, x = similar_test_spot_data$spot, config = genecoder.config) }   similar_spot2gex <- lapply(c(2:4),function(X){   t.test_difference_obs(true_obs = test_gex_data$gex, a = similar_spot2gex[[1]], b = similar_spot2gex[[X]]) })  save(similar_spot2gex,file = paste(sep=\"\",path_to_save,\"similar_spot2gex.RData\")) load(file = paste(sep=\"\",path_to_save,\"similar_spot2gex.RData\"))  print(c(\"similar p-value\",paste(c(\"0,0vs(-)3,(-)3:    \",\"0,0vs3,(-)3:    \",\"0,0vs(-)3,3:    \",\"0,0vs3,3:    \"),round(do.call('c',lapply(similar_spot2gex,function(X){X$p.value})),5)))) ## [1] \"similar p-value\"             \"0,0vs(-)3,(-)3:     0.61131\" ## [3] \"0,0vs3,(-)3:     0.5161\"     \"0,0vs(-)3,3:     0.21426\"    ## [5] \"0,0vs3,3:     0.61131\" # Spatial signal testing  signal_spot2gex <- list() for (i in c(1:10)){    genecoder.config$extract_spots$displacement_x <- i   genecoder.config$extract_spots$displacement_y <- 0    signal_test_spot_data <- GeneCodeR::prepare_spot(file_path_list = test_file_path_list,meta_info_list = meta_info_list,config = genecoder.config)    signal_spot2gex[[as.character(i)]] <- GeneCodeR::genecoder(model=genecoder.model, x = signal_test_spot_data$spot, config = genecoder.config) }  save(signal_spot2gex,file = paste(sep=\"\",path_to_save,\"signal_spot2gex.RData\"))   number_of_top_variable_genes_to_extract_adj.r.squared <- 3  spline_signal_adj.r.squared <- do.call('rbind',lapply(c(order(apply(test_gex_data$gex,2,var),decreasing = T)[1:number_of_top_variable_genes_to_extract_adj.r.squared]),function(Y){   internal.adj.r2 <- do.call('c',pbmcapply::pbmclapply(c(1:dim(signal_spot2gex[[1]])[1]),function(Z){     signal_spline <- data.frame(gene_level = do.call('c',lapply(c(1:10),function(X){       signal_spot2gex[[X]][Z,Y]     })),displacement=c(1:10))     adj.r.squared <- try(npreg::summary.ss(npreg::ss(x = signal_spline$gene_level,y = signal_spline$displacement))$adj.r.squared,silent = F)     if (!is.character(signal_spline)){       return(as.numeric(adj.r.squared))     }   },mc.cores = 8)) }))  save(spline_signal_adj.r.squared,file = paste(sep=\"\",path_to_save,\"spline_signal_adj.r.squared.RData\")) load(file = paste(sep=\"\",path_to_save,\"signal_spot2gex.RData\"))     signal_spline <- data.frame(gene_level = do.call('c',lapply(c(1:10),function(X){   signal_spot2gex[[X]][1,1] })),displacement=c(1:10))  mod.ss <- npreg::summary.ss(npreg::ss(x = signal_spline$gene_level,y = signal_spline$displacement))  plot(signal_spline$gene_level ~ signal_spline$displacement, main = paste(\"Adj.R-squared:    \",mod.ss$adj.r.squared)) lines(signal_spline$gene_level, mod.ss$y, lty = 2, col = 2, lwd = 2) load(file = paste(sep=\"\",path_to_save,\"spline_signal_adj.r.squared.RData\"))  title_name = \"spatial_signal\" tissue_name = \"breast\"  first_most_variable_gene = spline_signal_adj.r.squared[1,] second_most_variable_gene = spline_signal_adj.r.squared[2,] third_most_variable_gene = spline_signal_adj.r.squared[3,]  library(ggplot2)  lm <- rbind(c(1,2,3),             c(1,2,3),             c(1,2,3))  g1 <- ggplot(data.frame(Measure=first_most_variable_gene,Metric=\"Adj.R.Squared of Spline fits \\n 1st most variable gene \\n across all spatial spots\"), aes(x=Metric,y=Measure)) +    geom_violin() + ylim(-1,1)   g2 <- ggplot(data.frame(Measure=second_most_variable_gene,Metric=\"Adj.R.Squared of Spline fits \\n 2nd most variable gene \\n across all spatial spots\"), aes(x=Metric,y=Measure)) +    geom_violin() + ylim(-1,1)   g3 <- ggplot(data.frame(Measure=third_most_variable_gene,Metric=\"Adj.R.Squared of Spline fits \\n 3rd most variable gene \\n across all spatial spots\"), aes(x=Metric,y=Measure)) +    geom_violin() + ylim(-1,1)   gg_plots <- list(g1,g2,g3)  final_plots <- arrangeGrob(   grobs = gg_plots,   layout_matrix = lm ) ## Warning: Removed 1569 rows containing non-finite values (stat_ydensity). ## Warning: Removed 1549 rows containing non-finite values (stat_ydensity). ## Warning: Removed 742 rows containing non-finite values (stat_ydensity). plot(final_plots) ggsave(final_plots,filename = paste(path_to_save,\"/jpeg_accuracy_gcode_\",tissue_name,\"_SPATIAL/\",title_name,\"_accuracy_\",tissue_name,\"_spatial.png\",sep=\"\"),width = 7,height=5)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"AskExplain DBf (2022). GeneCodeR: Transforms image gene expression modalities Spatial Transcriptomics. R package version 2022.1.","code":"@Manual{,   title = {GeneCodeR: Transforms between image and gene expression modalities from Spatial Transcriptomics},   author = {David Banh from AskExplain},   year = {2022},   note = {R package version 2022.1}, }"},{"path":"/reference/extract_config_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_config_framework - the configuration framework for GeneCodeR — extract_config_framework","title":"extract_config_framework - the configuration framework for GeneCodeR — extract_config_framework","text":"extract_config_framework - configuration framework GeneCodeR","code":""},{"path":"/reference/extract_config_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_config_framework - the configuration framework for GeneCodeR — extract_config_framework","text":"","code":"extract_config_framework(verbose = F)"},{"path":"/reference/extract_config_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_config_framework - the configuration framework for GeneCodeR — extract_config_framework","text":"verbose - set TRUE print config parameters, editted","code":""},{"path":"/reference/extract_meta_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_meta_framework - the meta information framework for GeneCodeR — extract_meta_framework","title":"extract_meta_framework - the meta information framework for GeneCodeR — extract_meta_framework","text":"extract_meta_framework - meta information framework GeneCodeR","code":""},{"path":"/reference/extract_meta_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_meta_framework - the meta information framework for GeneCodeR — extract_meta_framework","text":"","code":"extract_meta_framework(verbose = F)"},{"path":"/reference/extract_meta_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_meta_framework - the meta information framework for GeneCodeR — extract_meta_framework","text":"verbose - set TRUE print meta information, editted","code":""},{"path":"/reference/extract_path_framework.html","id":null,"dir":"Reference","previous_headings":"","what":"extract_path_framework - the path list framework for GeneCodeR — extract_path_framework","title":"extract_path_framework - the path list framework for GeneCodeR — extract_path_framework","text":"extract_path_framework - path list framework GeneCodeR","code":""},{"path":"/reference/extract_path_framework.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"extract_path_framework - the path list framework for GeneCodeR — extract_path_framework","text":"","code":"extract_path_framework(verbose = F)"},{"path":"/reference/extract_path_framework.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"extract_path_framework - the path list framework for GeneCodeR — extract_path_framework","text":"verbose - set TRUE print path list, editted","code":""},{"path":"/reference/genecoder.html","id":null,"dir":"Reference","previous_headings":"","what":"GeneCodeR - Perturbing imaging tissue by altering spatial gene codes — genecoder","title":"GeneCodeR - Perturbing imaging tissue by altering spatial gene codes — genecoder","text":"GeneCodeR - Perturbing imaging tissue altering spatial gene codes","code":""},{"path":"/reference/genecoder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GeneCodeR - Perturbing imaging tissue by altering spatial gene codes — genecoder","text":"","code":"genecoder(model, x, config)"},{"path":"/reference/genecoder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GeneCodeR - Perturbing imaging tissue by altering spatial gene codes — genecoder","text":"model - learned model via Generative Encoding x - dataset transformed config - GeneCodeR configuration parameters define modality coming going ","code":""},{"path":"/reference/genecoder.transform.html","id":null,"dir":"Reference","previous_headings":"","what":"genecoder.transform - transform between modalities — genecoder.transform","title":"genecoder.transform - transform between modalities — genecoder.transform","text":"genecoder.transform - transform modalities","code":""},{"path":"/reference/genecoder.transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"genecoder.transform - transform between modalities — genecoder.transform","text":"","code":"genecoder.transform(model, x, config.transform)"},{"path":"/reference/genecoder.transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"genecoder.transform - transform between modalities — genecoder.transform","text":"model - learned model via Generative Encoding x - dataset transformed config.transform - transform list within GeneCodeR configuration parameters define modality coming going ","code":""},{"path":"/reference/learn_model.html","id":null,"dir":"Reference","previous_headings":"","what":"learn_model - learns the Generative Encoder model — learn_model","title":"learn_model - learns the Generative Encoder model — learn_model","text":"learn_model - learns Generative Encoder model","code":""},{"path":"/reference/learn_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"learn_model - learns the Generative Encoder model — learn_model","text":"","code":"learn_model(   data_list,   config = gcode::extract_config(F),   transfer = gcode::extract_transfer_framework(F),   recover = gcode::extract_recovery_framework(F),   join,   reference )"},{"path":"/reference/learn_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"learn_model - learns the Generative Encoder model — learn_model","text":"data_list List data matrices varying dimensionality. Attempts find similarities among datasets core structure. config Configuration parameters (required, default provided) transfer Transferring pre-trained model parameters (required) recover Important information used prediction imputation (required) join Join parameters share axes similar (required) #' @export","code":""},{"path":"/reference/prepare_gex.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare_gex - prepares gene expression data — prepare_gex","title":"prepare_gex - prepares gene expression data — prepare_gex","text":"prepare_gex - prepares gene expression data","code":""},{"path":"/reference/prepare_gex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare_gex - prepares gene expression data — prepare_gex","text":"","code":"prepare_gex(file_path_list, meta_info_list, config)"},{"path":"/reference/prepare_gex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare_gex - prepares gene expression data — prepare_gex","text":"file_path_list - list files containing path files including gene expression path meta_info_list - list meta information helps read files extracts relevant information config - main configuration parameters extract image pixels corresponding spot","code":""},{"path":"/reference/prepare_spot.html","id":null,"dir":"Reference","previous_headings":"","what":"prepare_spot - prepares image information per spot — prepare_spot","title":"prepare_spot - prepares image information per spot — prepare_spot","text":"prepare_spot - prepares image information per spot","code":""},{"path":"/reference/prepare_spot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prepare_spot - prepares image information per spot — prepare_spot","text":"","code":"prepare_spot(file_path_list, meta_info_list, config)"},{"path":"/reference/prepare_spot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prepare_spot - prepares image information per spot — prepare_spot","text":"file_path_list - list files containing path files including image path meta_info_list - list meta information helps read files extracts relevant information config - main configuration parameters extract image pixels corresponding spot","code":""}]
